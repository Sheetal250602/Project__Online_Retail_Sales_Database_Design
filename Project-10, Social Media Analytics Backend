# Project10: Social Media Analytics Backend
# Using MySQL Workbench for creating Database 'socialmedia_db' and tables Users, Posts, Likes and Comments.

CREATE DATABASE socialmedia_db;
USE socialmedia_db;

-- Users Table
CREATE TABLE Users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    join_date DATE DEFAULT (CURRENT_DATE)
);

-- Posts Table
CREATE TABLE Posts (
    post_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    content TEXT NOT NULL,
    created_at DATETIME DEFAULT NOW(),
    like_count INT DEFAULT 0,
    comment_count INT DEFAULT 0,
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

-- Likes Table
CREATE TABLE Likes (
    like_id INT AUTO_INCREMENT PRIMARY KEY,
    post_id INT,
    user_id INT,
    like_date DATETIME DEFAULT NOW(),
    FOREIGN KEY (post_id) REFERENCES Posts(post_id),
    FOREIGN KEY (user_id) REFERENCES Users(user_id),
    UNIQUE (post_id, user_id) -- prevent duplicate likes
);

-- Comments Table
CREATE TABLE Comments (
    comment_id INT AUTO_INCREMENT PRIMARY KEY,
    post_id INT,
    user_id INT,
    comment_text TEXT NOT NULL,
    comment_date DATETIME DEFAULT NOW(),
    FOREIGN KEY (post_id) REFERENCES Posts(post_id),
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);


-- 2. Inserting Sample Data
-- Users
INSERT INTO Users (username, email) VALUES
('alice', 'alice@mail.com'),
('bob', 'bob@mail.com'),
('charlie', 'charlie@mail.com');

-- Posts
INSERT INTO Posts (user_id, content) VALUES
(1, 'Excited to share my first post!'),
(2, 'What a great day for learning SQL!'),
(3, 'Loving this new platform!');

-- Likes
INSERT INTO Likes (post_id, user_id) VALUES
(1, 2), (1, 3),
(2, 1), (2, 3),
(3, 1);

-- Comments
INSERT INTO Comments (post_id, user_id, comment_text) VALUES
(1, 2, 'Congrats Alice!'),
(1, 3, 'Welcome aboard!'),
(2, 1, 'Totally agree Bob!'),
(3, 2, 'Yes, same here!');


-- 3. Views – Engagement, Engagement score = likes + comments
CREATE VIEW PostEngagement AS
SELECT p.post_id, u.username, p.content,
       p.like_count, p.comment_count,
       (p.like_count + p.comment_count) AS engagement_score
FROM Posts p
JOIN Users u ON p.user_id = u.user_id;

-- Test view
SELECT * FROM PostEngagement;

-- 4. Rankings – Window Functions, Rank posts by engagement
SELECT post_id, username, engagement_score,
       RANK() OVER (ORDER BY engagement_score DESC) AS rank_position
FROM PostEngagement;


-- 5. Triggers – Auto Update Counts
DELIMITER //
-- After like insert
CREATE TRIGGER after_like_insert
AFTER INSERT ON Likes
FOR EACH ROW
BEGIN
    UPDATE Posts SET like_count = like_count + 1 WHERE post_id = NEW.post_id;
END//
-- After comment insert
CREATE TRIGGER after_comment_insert
AFTER INSERT ON Comments
FOR EACH ROW
BEGIN
    UPDATE Posts SET comment_count = comment_count + 1 WHERE post_id = NEW.post_id;
END//
DELIMITER ;

-- 6. Reports, Engagement per user
SELECT u.username,
       COUNT(DISTINCT p.post_id) AS total_posts,
       SUM(p.like_count) AS total_likes,
       SUM(p.comment_count) AS total_comments,
       SUM(p.like_count + p.comment_count) AS total_engagement
FROM Users u
LEFT JOIN Posts p ON u.user_id = p.user_id
GROUP BY u.username
ORDER BY total_engagement DESC;

-- Top 5 posts by engagement
SELECT * FROM PostEngagement
ORDER BY engagement_score DESC
LIMIT 5;
