# Project11: Sports Tournament Tracker
# Using MySQL Workbench for creating Database 'tournament_db' and tables Teams, Players, Matches and Stats.

DROP DATABASE IF EXISTS tournament_db;
CREATE DATABASE tournament_db;
USE tournament_db;

-- 1. Teams Table
CREATE TABLE Teams (
    team_id INT AUTO_INCREMENT PRIMARY KEY,
    team_name VARCHAR(100) NOT NULL,
    coach VARCHAR(100)
);

-- Players Table
CREATE TABLE Players (
    player_id INT AUTO_INCREMENT PRIMARY KEY,
    team_id INT,
    player_name VARCHAR(100) NOT NULL,
    role VARCHAR(50),
    FOREIGN KEY (team_id) REFERENCES Teams(team_id)
);

-- Matches Table
CREATE TABLE Matches (
    match_id INT AUTO_INCREMENT PRIMARY KEY,
    team1_id INT,
    team2_id INT,
    match_date DATE,
    winner_team_id INT,
    FOREIGN KEY (team1_id) REFERENCES Teams(team_id),
    FOREIGN KEY (team2_id) REFERENCES Teams(team_id),
    FOREIGN KEY (winner_team_id) REFERENCES Teams(team_id)
);

-- Stats Table
CREATE TABLE Stats (
    stat_id INT AUTO_INCREMENT PRIMARY KEY,
    match_id INT,
    player_id INT,
    runs INT DEFAULT 0,
    wickets INT DEFAULT 0,
    points INT DEFAULT 0,
    FOREIGN KEY (match_id) REFERENCES Matches(match_id),
    FOREIGN KEY (player_id) REFERENCES Players(player_id)
);


-- 2. Inserting Sample Data
-- Teams
INSERT INTO Teams (team_name, coach) VALUES
('Warriors', 'Coach A'),
('Titans', 'Coach B'),
('Riders', 'Coach C');

-- Players
INSERT INTO Players (team_id, player_name, role) VALUES
(1, 'Alice', 'Batsman'),
(1, 'Bob', 'Bowler'),
(2, 'Charlie', 'All-Rounder'),
(2, 'David', 'Batsman'),
(3, 'Eve', 'Bowler'),
(3, 'Frank', 'Batsman');

-- Matches
INSERT INTO Matches (team1_id, team2_id, match_date, winner_team_id) VALUES
(1, 2, '2023-08-01', 1),
(2, 3, '2023-08-05', 3),
(1, 3, '2023-08-10', 1);

-- Stats
INSERT INTO Stats (match_id, player_id, runs, wickets, points) VALUES
(1, 1, 45, 0, 10),
(1, 2, 5, 2, 15),
(1, 3, 30, 1, 12),
(1, 4, 20, 0, 8),
(2, 3, 60, 0, 20),
(2, 4, 15, 1, 10),
(2, 5, 10, 3, 18),
(3, 1, 70, 0, 25),
(3, 6, 40, 0, 15);


-- 3. Queries – Match Results & Player Scores, Match results with winner
SELECT m.match_id, t1.team_name AS team1, t2.team_name AS team2, 
       m.match_date, tw.team_name AS winner
FROM Matches m
JOIN Teams t1 ON m.team1_id = t1.team_id
JOIN Teams t2 ON m.team2_id = t2.team_id
JOIN Teams tw ON m.winner_team_id = tw.team_id;

-- Player scores per match
SELECT p.player_name, t.team_name, m.match_id, s.runs, s.wickets, s.points
FROM Stats s
JOIN Players p ON s.player_id = p.player_id
JOIN Teams t ON p.team_id = t.team_id
JOIN Matches m ON s.match_id = m.match_id;


-- 4. Views – Leaderboards & Points, Player leaderboard (total points)
CREATE VIEW PlayerLeaderboard AS
SELECT p.player_name, t.team_name, SUM(s.points) AS total_points
FROM Stats s
JOIN Players p ON s.player_id = p.player_id
JOIN Teams t ON p.team_id = t.team_id
GROUP BY p.player_name, t.team_name
ORDER BY total_points DESC;

-- Team points table (win = 2 points)
CREATE VIEW TeamPoints AS
SELECT t.team_name, COUNT(m.winner_team_id) * 2 AS total_points
FROM Teams t
LEFT JOIN Matches m ON t.team_id = m.winner_team_id
GROUP BY t.team_name
ORDER BY total_points DESC;


-- 5. CTE – Average Player Performance
WITH PlayerAvg AS (
    SELECT p.player_name, AVG(s.runs) AS avg_runs, AVG(s.wickets) AS avg_wickets
    FROM Stats s
    JOIN Players p ON s.player_id = p.player_id
    GROUP BY p.player_name
)
SELECT * FROM PlayerAvg ORDER BY avg_runs DESC;
